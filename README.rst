Windows Printer Installer
=========================

WPI 是一个使用 Python 3 编写的安装非本地打印机 （包括驱动，端口） 的工具。


安装
====

先安装 Python 3 (建议选择 32bit 的 3.4 版) 及 pip 组件

然后手动下载安装相应版本的 `pywin32 <https://sourceforge.net/projects/pywin32/files/pywin32/>`_

再以管理员启动 cmd 后用 pip 安装 wpi：
::

    pip install wpi


为了解压在压缩包里的驱动，应当下载安装 `7-Zip <http://www.7-zip.org/download.html>`_ 如果想把 wpi 打包成可以多系统下可执行的单一程序，应当安装32位的 7-Zip

用法
====

分为以 Python 模块和脚本运行和以编译好的独立的 exe 运行两种情况。
如果你是开发者，可能对你来说，实用价值最大的是 wpi.reg 模块，此模块可以通过类似 dict 对象的方式处理注册表。


以脚本运行
-----
通过 pip 安装 wpi 后，wpi 应该就可以直接在 cmd 下运行了


以独立的 exe 运行
-----------

如果想在没有 Python 环境的系统下运行，得把 Python 环境和 wpi 依赖的模块打包在一起。
先安装 Pyinstaller, 以管理员打开 cmd 执行：
::

    pip install pyinstaller

然后运行打包命令:
::

   wpi2exe

这样会生成单一的 exe 文件， wpi2exe 使用 %LOCALAPPDATA%\\wpi2exe\\config.py 作为配置文件，如果此文件不存在，wpi2exe 会自动创建它。
可以编辑它以设置输出目录等。正如后缀名所示，此配置文件是一个 Python 脚本。

现在我们可以运行 wpi.exe 了， 举例：
::

    wpi.exe D:\my_set.py D:\wpi_config.py

只有两个可选参数： 第一个参数是定义了打印机集合的文件，第二个是配置文件。 默认的配置文件位置是 %LOCALAPPDATA%\\wpi\\config.py。
如果像此例子中这样以第二个参数指定了配置文件，默认的配置文件则会被忽略。只有当以一个参数的方式运行 wpi.exe 时（既没有指定配置脚本），wpi.exe 才会使用默认的配置文件。


问：打印机集合文件怎么编写？
--------------
以无参数运行独立的 wpi.exe 时，会自动把名为 set_sample.py 的打印机集合样例文件复制到程序同目录。
应该查看 set_sample.py 以确定怎么定义打印机集合。也可查看模块 wpi.set_sample。


问：从打印机官网下载的驱动应该放在哪里？
--------------------
以无参数运行独立的 wpi.exe 时，也会自动在程序同目录下创建名为 drivers 的文件夹。打开此文件夹看看里面的结构，就能明白怎么放置驱动程序。
驱动程序包裹可放置在特定的系统版本目录下，也可放置在上一级，这样就表示这个驱动是可用于多系统的。

下载的文件只要是 7-Zip 可以解包（解压）的文件就无需手动解包。程序会自动寻找包裹里的 inf 文件并比较在打印机集合文件里给定的驱动名，符合就会使用此包裹里的这个 inf 文件。
包裹里的 inf 文件只能在第一级里，这样的情况是不会读取 inf 的：比如把 inf 打包为包裹1，然后把包裹1再打包成包裹2。如此，程序就不会使用包裹2，因为包裹2的文件列表里无 inf 文件。


问：怎么运行一下程序就安装好打印机？
------------------
必须使用单一的 wpi.exe，且把定义好的打印机文件以 _.py 命名后放置程序同目录下。


问：我有多个打印机集合文件，怎么选择安装？
---------------------
直接把集合文件拖到 wpi.exe 上，Windows 系统就会自动以一个参数运行，那一个参数就是拖动的集合的文件名。